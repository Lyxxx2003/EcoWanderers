{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red39\green129\blue201;\red0\green0\blue0;\red255\green255\blue255;
\red20\green152\blue106;\red212\green20\blue102;\red226\green131\blue14;\red235\green16\blue47;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c18039\c58431\c82745;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c65098\c49020;\cssrgb\c87451\c18824\c47451;\cssrgb\c91373\c58431\c4706;\cssrgb\c94902\c17255\c23922;\cssrgb\c100000\c100000\c100000\c50196;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  * \cf2 \strokec2 as\cf4 \strokec4  readlineSync \cf2 \strokec2 from\cf4 \strokec4  \cf5 \strokec5 'readline-sync'\cf4 \strokec4 ;\
\
\cf2 \strokec2 let\cf4 \strokec4  \cf6 \strokec6 mode\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  = \cf5 \strokec5 "walking"\cf4 \strokec4 ;\
\
\cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 coefficients\cf4 \strokec4 : \{ [\cf6 \strokec6 key\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4 ]: \cf7 \strokec7 number\cf4 \strokec4  \} = \{\
    \cf6 \strokec6 driving\cf4 \strokec4 : \cf6 \strokec6 0.709888\cf4 \strokec4 ,\
    \cf6 \strokec6 walking\cf4 \strokec4 : \cf6 \strokec6 0.001\cf4 \strokec4 ,\
    \cf6 \strokec6 biking\cf4 \strokec4 : \cf6 \strokec6 0.046120705\cf4 \strokec4 ,\
    \cf6 \strokec6 transit\cf4 \strokec4 : \cf6 \strokec6 0.4285\cf4 \strokec4 \
\};\
\
\cf2 \strokec2 async\cf4 \strokec4  \cf2 \strokec2 function\cf4 \strokec4  \cf8 \strokec8 getDistance\cf4 \strokec4 (origin: \cf7 \strokec7 string\cf4 \strokec4 , destination: \cf7 \strokec7 string\cf4 \strokec4 ): \cf8 \strokec8 Promise\cf4 \strokec4 <\{ \cf6 \strokec6 distance\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  | \cf2 \strokec2 null\cf4 \strokec4 , \cf6 \strokec6 co2eExpended\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  | \cf2 \strokec2 null\cf4 \strokec4  \}> \{\
    \cf2 \strokec2 let\cf4 \strokec4  \cf6 \strokec6 dist\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  | \cf2 \strokec2 null\cf4 \strokec4  = \cf2 \strokec2 null\cf4 \strokec4 ;\
    \cf2 \strokec2 let\cf4 \strokec4  \cf6 \strokec6 co2eExpended\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  | \cf2 \strokec2 null\cf4 \strokec4  = \cf2 \strokec2 null\cf4 \strokec4 ;\
\
    \cf2 \strokec2 try\cf4 \strokec4  \{\
        \cf2 \strokec2 const\cf4 \strokec4  response = \cf2 \strokec2 await\cf4 \strokec4  \cf8 \strokec8 fetch\cf4 \strokec4 (\cf5 \strokec5 `https://maps.googleapis.com/maps/api/directions/json?destination=$\{destination\}&mode=$\{mode\}&origin=$\{origin\}&key=API_KEY`\cf4 \strokec4 );\
        \cf2 \strokec2 const\cf4 \strokec4  data = \cf2 \strokec2 await\cf4 \strokec4  response.\cf8 \strokec8 json\cf4 \strokec4 ();\
\
        \cf2 \strokec2 if\cf4 \strokec4  (data.routes && data.routes[\cf6 \strokec6 0\cf4 \strokec4 ] && data.routes[\cf6 \strokec6 0\cf4 \strokec4 ].legs && data.routes[\cf6 \strokec6 0\cf4 \strokec4 ].legs[\cf6 \strokec6 0\cf4 \strokec4 ]) \{\
            \cf9 \strokec9 // Set 'dist' equal to the specified distance text\cf4 \strokec4 \
            dist = data.routes[\cf6 \strokec6 0\cf4 \strokec4 ].legs[\cf6 \strokec6 0\cf4 \strokec4 ].distance.text;\
        \} \cf2 \strokec2 else\cf4 \strokec4  \{\
            \cf2 \strokec2 throw\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  \cf8 \strokec8 Error\cf4 \strokec4 (\cf5 \strokec5 'Invalid response structure from Google Maps API'\cf4 \strokec4 );\
        \}\
    \} \cf2 \strokec2 catch\cf4 \strokec4  (error) \{\
        \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 error\cf4 \strokec4 (\cf5 \strokec5 "Unable to fetch data:"\cf4 \strokec4 , error);\
    \}\
\
    \cf2 \strokec2 return\cf4 \strokec4  \{ \cf6 \strokec6 distance\cf4 \strokec4 : dist, co2eExpended \};\
\}\
\
\cf2 \strokec2 function\cf4 \strokec4  \cf8 \strokec8 processUserInput\cf4 \strokec4 () \{\
    \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 pre_origin\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  = readlineSync.\cf8 \strokec8 question\cf4 \strokec4 (\cf5 \strokec5 'Enter origin: '\cf4 \strokec4 );\
    \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 pre_destination\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  = readlineSync.\cf8 \strokec8 question\cf4 \strokec4 (\cf5 \strokec5 'Enter destination: '\cf4 \strokec4 );\
\
    \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 origin\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  = pre_origin.\cf8 \strokec8 replace\cf4 \strokec4 (\cf5 \strokec5 /\\s+/g\cf4 \strokec4 , \cf5 \strokec5 '+'\cf4 \strokec4 );\
    \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 destination\cf4 \strokec4 : \cf7 \strokec7 string\cf4 \strokec4  = pre_destination.\cf8 \strokec8 replace\cf4 \strokec4 (\cf5 \strokec5 /\\s+/g\cf4 \strokec4 , \cf5 \strokec5 '+'\cf4 \strokec4 );\
\
    \cf9 \strokec9 // Call the async function and handle the result\cf4 \strokec4 \
    \cf8 \strokec8 getDistance\cf4 \strokec4 (origin, destination).\cf8 \strokec8 then\cf4 \strokec4 ((\{ distance, co2eExpended \}) => \{\
\
        \cf9 \strokec9 // Convert distance from string to number (remove " mi" suffix)\cf4 \strokec4 \
        \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 distanceValue\cf4 \strokec4 : \cf7 \strokec7 number\cf4 \strokec4  = \cf7 \strokec7 parseFloat\cf4 \strokec4 (distance!.\cf8 \strokec8 replace\cf4 \strokec4 (\cf5 \strokec5 " mi"\cf4 \strokec4 , \cf5 \strokec5 ""\cf4 \strokec4 ));\
\
        \cf9 \strokec9 // Use the appropriate coefficient based on the mode of transportation\cf4 \strokec4 \
        \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 coefficient\cf4 \strokec4 : \cf7 \strokec7 number\cf4 \strokec4  = coefficients[mode] || \cf6 \strokec6 0\cf4 \strokec4 ;\
\
        \cf9 \strokec9 // Calculate CO2E saved (example formula, you may need to adjust based on your data)\cf4 \strokec4 \
        co2eExpended = (distanceValue * coefficient).\cf8 \strokec8 toString\cf4 \strokec4 ();\
\
        \cf2 \strokec2 const\cf4 \strokec4  \cf6 \strokec6 co2eSaved\cf4 \strokec4 : \cf7 \strokec7 number\cf4 \strokec4  = (distanceValue * \cf6 \strokec6 0.709888\cf4 \strokec4 ) - \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended);\
\
        \cf9 \strokec9 // points system\cf4 \strokec4 \
        \cf2 \strokec2 let\cf4 \strokec4  \cf6 \strokec6 points\cf4 \strokec4 : \cf7 \strokec7 number\cf4 \strokec4  = \cf6 \strokec6 0\cf4 \strokec4 ;\
        \cf2 \strokec2 let\cf4 \strokec4  \cf6 \strokec6 userPoints\cf4 \strokec4 : \cf7 \strokec7 number\cf4 \strokec4  = \cf7 \strokec7 parseInt\cf4 \strokec4 (points.\cf8 \strokec8 toString\cf4 \strokec4 ());\
        \cf2 \strokec2 if\cf4 \strokec4  (co2eSaved / \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended) == \cf6 \strokec6 0\cf4 \strokec4 ) \{\
            userPoints = userPoints + \cf6 \strokec6 0\cf4 \strokec4 ;\
        \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  (co2eSaved / \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended) > \cf6 \strokec6 0\cf4 \strokec4  && co2eSaved / \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended) < \cf6 \strokec6 0.5\cf4 \strokec4 ) \{\
            userPoints = userPoints + \cf6 \strokec6 10\cf4 \strokec4 ;\
        \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  (co2eSaved / \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended) >= \cf6 \strokec6 0.5\cf4 \strokec4  && co2eSaved / \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended) < \cf6 \strokec6 1.5\cf4 \strokec4 ) \{\
            userPoints = userPoints + \cf6 \strokec6 20\cf4 \strokec4 ;\
        \} \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  (co2eSaved / \cf7 \strokec7 parseFloat\cf4 \strokec4 (co2eExpended) >= \cf6 \strokec6 1.5\cf4 \strokec4 ) \{\
            userPoints = userPoints + \cf6 \strokec6 30\cf4 \strokec4 ;\
        \}\
\
        \cf9 \strokec9 // 'distance' and 'co2eSaved' now contain the distance and CO2E values\cf4 \strokec4 \
        \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf5 \strokec5 "Distance Value(miles):"\cf4 \strokec4 , distance);\
        \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf5 \strokec5 "CO2E(lbs) Expended:"\cf4 \strokec4 , co2eExpended);\
        \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf5 \strokec5 "CO2E(lbs) Saved: "\cf4 \strokec4 , co2eSaved);\
        \cf6 \strokec6 console\cf4 \strokec4 .\cf8 \strokec8 log\cf4 \strokec4 (\cf5 \strokec5 "Points Earned: "\cf4 \strokec4 , userPoints);\
\
    \});\
\}\
\
\pard\pardeftab720\partightenfactor0
\cf9 \strokec9 // Start the process by asking for user input\cf4 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf8 \strokec8 processUserInput\cf4 \strokec4 ();}